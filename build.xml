<project name="JXplorer" default="build">

    <!-- this build file should be at the top level of the jxplorer project,
         but is committed to 'resources' in cvs for convenience :-) -->

    <!--
      Properties that may not be overriden by developers.
    -->
    <property name="version" value="JXv3.2b6"/>

    <property name="classes" value="classes"/>
    <property name="report" value="build_reports/"/>
    <property name="release" value="release${version}"/>

    <!--
      Include developer's own property values.
    -->
    <property file="build.properties"/>

    <!--
      Default property values that may be overriden by developers.
    -->

    <property name="jars" value="jars"/>
    <property name="src" value="src"/>
    <property name="dist" value="dist"/>
    <property name="zerog_image" value="install image"/>
    <property name="compile.debug" value="on"/>
    <property name="compile.optimize" value="on"/>
    <property name="docs" value="docs"/>
    <property name="apidocs" value="${docs}/api"/>
    <property name="zerog_dir" value="D:\cvs_pegacat\jxplorer\JXplorer"/>


    <path id="lib">
        <fileset dir="${jars}" includes="*.jar"/>
    </path>

    <target name="init">
        <tstamp>
            <format property="init.timestamp" pattern="yyyy-MM-dd HH:mm z"/>
        </tstamp>
    </target>

    <!--            includeAntRuntime="false"  -->

    <target name="build" depends="build_number" description="Build all Java code">
        <mkdir dir="${classes}"/>
        <javac srcdir="${src}"
            destdir="${classes}"
            classpathref="lib"
            debug="${compile.debug}"
            optimize="${compile.optimize}"
            deprecation="off"
            nowarn="off"
            target="1.4"
            source="1.4"
            verbose="off">
        </javac>
    </target>

    <target name="build_number" depends="init"
        description="Rewrites the 'BuildNumber.java' file to set compile time stamp.">
        <property name="build.number" value="${version} ${init.timestamp}"/>
        <echo file="${src}/com/ca/directory/BuildNumber.java">
        package com.ca.directory;
        // automatically generated by ant build.xml file.
        //THIS FILE MUST NOT BE ADDED TO CVS OR THE LIVE MAKE SYSTEM
    
        public class BuildNumber
        {
            public static String value = &quot;JXplorer (build ${version} ${init.timestamp})&quot;;
        }
        </echo>


    </target>

    <target name="clean" depends="init"
        description="Delete all class files">
        <delete dir="${classes}"/>
        <delete dir="${dist}"/>
        <delete dir="${release}"/>
        <delete file="jxplorer.jar"/>
    </target>

    <!--target name="jar" description="Create jxplorer.jar" depends="build">
      <jar jarfile="jxplorer.jar" compress="yes" manifest="manifest.txt"
        basedir="${classes}" />
    </target-->

    <!-- ================================================================== -->
    <!-- Genjar targets for producing the various jars for the project  -->
    <!-- ================================================================== -->
<!-- IS THERE SOME WAY TO GET THE Class-Path ATTRIBUTE TO USE THE 'lib' PATH DIRECTLY?? -->

    <target name="jar" depends="build" description="Compile and jars JavaBrowser.jar">
        <jar jarfile="jxplorer.jar">
            <fileset dir="${classes}"
                excludes="com/**/*Test.class
                          com/**/*TestSuite.class"/>
            <manifest>
                <attribute name="Created-By" value="${user.name}"/>
                <attribute name="Build-Version" value="${version}"/>
                <!--section name="JXplorer ldap browser">
                    <attribute name="Implementation-Title" value="JXplorer"/>
                    <attribute name="Implementation-Version" value="${version} ${TODAY}"/>
                    <attribute name="Implementation-Vendor" value="JXplorer Open Source Project"/>
                </section-->
                <attribute name="Class-Path" value="jxplorer.jar help.jar jhall.jar junit.jar log4j-1.2.8.jar"/>
            	<attribute name="Main-Class" value="com.ca.directory.jxplorer.JXplorer"/>
                <section name="com/ca/directory/jxplorer/">
                    <attribute name="Specification-Title" value="JXplorer LDAP browser"/>
                    <attribute name="Specification-Version" value="${version}"/>
                    <attribute name="Implementation-Title" value="JXplorer http://jxplorer.org/"/>
                    <attribute name="Implementation-Version" value="${version} ${init.timestamp}"/>
                    <attribute name="Implementation-Vendor" value="JXplorer Open Source Project"/>
                 </section>
            </manifest>

        </jar>
    </target>

    <target name="dist"
        description="Build complete JXplorer distribution package (from cvs image only!)"
        depends="jar">
        <delete dir="${dist}"/>
        <mkdir dir="${dist}"/>
        <mkdir dir="${dist}/jxplorer"/>
        <copy todir="${dist}/jxplorer">
            <fileset dir="." includes="build.xml"/>
            <fileset dir="resources" excludes="dxconfig.txt,JX.log"/>
        </copy>
        <mkdir dir="${dist}/jxplorer/jars"/>
        <copy todir="${dist}/jxplorer/jars">
            <fileset dir="." includes="jxplorer.jar"/>
            <fileset dir="${jars}" includes="*.jar"/>
        </copy>  
        <copy todir="${zerog_image}/jxplorer/jars">
            <fileset dir="." includes="jxplorer.jar"/>
            <fileset dir="${jars}" includes="*.jar"/>
        </copy>      
        <fixcrlf srcdir="${dist}"
            eol="lf"
            eof="remove"
            includes="**/*.sh"
            />
    </target>

	<!-- note; this requires access to the 'iaant.jar' install anywhere jar file - added to ant lib -->

	<taskdef name="buildinstaller" classname="com.zerog.ia.integration.ant.InstallAnywhereAntTask"/>

	<target name="build_installers" description="build zerog install packages">
		<buildinstaller
			IAlocation="C:\Program Files\InstallAnywhere 6 Enterprise"
			IAProjectFile="${zerog_dir}\JXplorer.iap_xml"
			BuildSolarisWithoutVM="true"
			BuildWindowsWithoutVM="true"
			BuildLinuxWithoutVM="true"
		/>
	</target>
	
    <target name="release"
        description="Create src and deploy release zips/tar.bz2 files (from cvs image only!)"
        depends="clean, test, dist, javadoc, build_installers">
        <mkdir dir="${release}"/>
        <mkdir dir="temp/jxplorer/src"/>
        <copy todir="temp/jxplorer/src">
            <fileset dir="${src}"/>
        </copy>
        <mkdir dir="tempdoc/jxplorer/docs"/>
        <move todir="tempdoc/jxplorer/docs">
            <fileset dir="${docs}"/>
        </move>
        <zip destfile="${release}/${version}src.zip" basedir="temp"/>
        <zip destfile="${release}/${version}deploy.zip" basedir="${dist}"/>
        <zip destfile="${release}/${version}javadoc.zip" basedir="tempdoc"/>
        <tar tarfile="${release}/${version}src.tar.bz2" basedir="temp" compression="bzip2"/>
        <tar tarfile="${release}/${version}deploy.tar.bz2" basedir="${dist}" compression="bzip2"/>
        <tar tarfile="${release}/${version}javadoc.tar.bz2" basedir="tempdoc" compression="bzip2"/>
        <delete dir="temp"/>
        <move todir="${docs}">
            <fileset dir="tempdoc/jxplorer/docs"/>
        </move>

		<move file="${zerog_dir}\JXplorer_Build_Output\Web_Installers\InstData\Windows\NoVM\jxplorer.exe" 
		  tofile="${release}/${version}_install_windows.exe" />
		<move file="${zerog_dir}\JXplorer_Build_Output\Web_Installers\InstData\Linux\NoVM\jxplorer.bin" 
		  tofile="${release}/${version}_install_linux.bin" />
		<move file="${zerog_dir}\JXplorer_Build_Output\Web_Installers\InstData\Solaris\NoVM\jxplorer.bin" 
		  tofile="${release}/${version}_install_solaris.bin" />

    </target>

    <!-- ==================================================================	-->
    <!-- JUnit test targets							                        -->
    <!--                                                                    -->
    <!-- Reminder: to get these to work you require optional.jar and        -->
    <!-- junit.jar in the %ANT_HOME%/lib directory		                    -->
    <!-- ================================================================== -->

    <target name="compile_tests" depends="build">
        <mkdir dir="${report}"/>
        <javac destdir="${classes}" includeAntRuntime="false"
            classpathref="lib" debug="${compile.debug}">
            <src path="${src}"/>
        </javac>
    </target>

    <target name="test" depends="compile_tests"
        description="Run JUnit tests (requires junit.jar in %ANT%/lib !!!)">
        <junit printsummary="yes" haltonerror="off" haltonfailure="on">
            <classpath>
                <pathelement location="${classes}"/>
                <!-- pathelement path="${jars}" / -->
                <fileset dir="${jars}" includes="*.jar"/> <!-- &*(%&*())(* required to avoid obscure errors with log4j...) -->
            </classpath>
            <formatter type="plain"/>
            <batchtest fork="yes" todir="${report}">
                <fileset dir="${classes}">
                    <include name="**/*TestSuite.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="javadoc" description="generate javadoc source documentation (produces MANY warnings :-) )">
        <mkdir dir="${apidocs}"/>

        <javadoc access="private"
            destdir="${apidocs}"
            author="true"
            version="true"
            classpathref="lib"
            use="true"
            additionalparam="-breakiterator"
            windowtitle="JXplorer Source Documentation">
            <packageset dir="${src}" defaultexcludes="yes">
                <include name="com/**"/>
            </packageset>


            <doctitle><![CDATA[<h1>JXplorer Ldap Browser</h1>]]></doctitle>
            <bottom><![CDATA[<i>This is Open Source Code under the CA Open Source Licence ( == Apache Licence)</i>]]></bottom>
            <link href="http://java.sun.com/products/jdk/1.4/docs/api/"/>
        </javadoc>
    </target>

</project>
